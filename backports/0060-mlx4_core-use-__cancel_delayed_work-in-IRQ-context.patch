From: Saeed Mahameed <saeedm@mellanox.com>
Subject: [PATCH] mlx4_core: use __cancel_delayed_work in IRQ context

issue: 212090

in kernel < 3.7.0 we should use __cancel_delayed_work in IRQ context
in kernel >= 3.7.0 cancel_delayed_work function is safe to call from
any context including IRQ handler
http://lxr.linux.no/linux+v3.7/kernel/workqueue.c#L2981

this should fix bugs of the kind:
BUG: scheduling while atomic: qemu-kvm/60229/0x10000100

Change-Id: Idb77bb981e573207b937fe1c607bc08a6753081a
Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
---
 drivers/infiniband/hw/mlx4/alias_GUID.c |   12 +++++++++++-
 1 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/drivers/infiniband/hw/mlx4/alias_GUID.c b/drivers/infiniband/hw/mlx4/alias_GUID.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/infiniband/hw/mlx4/alias_GUID.c
+++ b/drivers/infiniband/hw/mlx4/alias_GUID.c
@@ -464,9 +464,19 @@ void mlx4_ib_invalidate_all_guid_record(struct mlx4_ib_dev *dev, int port)
 		make sure no work waits in the queue, if the work is already
 		queued(not on the timer) the cancel will fail. That is not a problem
 		because we just want the work started.
+
+		in kernel < 3.7.0 we should use __cancel_delayed_work in IRQ context
+		in kernel >= 3.7.0 cancel_delayed_work function is safe to call from
+		any context including IRQ handler
+		http://lxr.linux.no/linux+v3.7/kernel/workqueue.c#L2981
 		*/
-		cancel_delayed_work(&dev->sriov.alias_guid.
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,7,0)
+		__cancel_delayed_work(&dev->sriov.alias_guid.
 				      ports_guid[port - 1].alias_guid_work);
+#else
+		cancel_delayed_work(&dev->sriov.alias_guid.
+                                    ports_guid[port - 1].alias_guid_work);
+#endif
 		queue_delayed_work(dev->sriov.alias_guid.ports_guid[port - 1].wq,
 				   &dev->sriov.alias_guid.ports_guid[port - 1].alias_guid_work,
 				   0);
