From: Eugenia Emantayev <eugenia@mellanox.co.il>
Subject: [PATCH] BACKPORT: mlx4_en enable features for kernels < 3.3

Change-Id: I776bd8dc5a2d1f03c2677a99457e1a2759a19164
Signed-off-by: Eugenia Emantayev <eugenia@mellanox.co.il>
Signed-off-by: Matan Barak <matanb@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx4/en_ethtool.c |   47 +++++++++++++
 drivers/net/ethernet/mellanox/mlx4/en_netdev.c  |   10 +++
 drivers/net/ethernet/mellanox/mlx4/en_rx.c      |   85 +++++++++++++++++++++++
 drivers/net/ethernet/mellanox/mlx4/mlx4_en.h    |   17 +++++
 drivers/net/ethernet/mellanox/mlx4/mlx4_stats.h |    9 +++
 5 files changed, 168 insertions(+), 0 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
@@ -307,6 +307,9 @@ static const char main_strings[][ETH_GSTRING_LEN] = {
 	"vport_tx_errors",
 
 	/* port statistics */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	"rx_lro_aggregated", "rx_lro_flushed", "rx_lro_no_desc",
+#endif
 	"tx_tso_packets",
 	"tx_queue_stopped", "tx_wake_queue", "tx_timeout", "rx_alloc_failed",
 	"rx_csum_good", "rx_csum_none", "tx_chksum_offload",
@@ -472,6 +475,23 @@ int mlx4_en_get_sset_count(struct net_device *dev, int sset)
 	}
 }
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+static void mlx4_en_update_lro_stats(struct mlx4_en_priv *priv)
+{
+	int i;
+
+	priv->port_stats.lro_aggregated = 0;
+	priv->port_stats.lro_flushed = 0;
+	priv->port_stats.lro_no_desc = 0;
+
+	for (i = 0; i < priv->rx_ring_num; i++) {
+		priv->port_stats.lro_aggregated += priv->rx_ring[i]->lro.lro_mgr.stats.aggregated;
+		priv->port_stats.lro_flushed += priv->rx_ring[i]->lro.lro_mgr.stats.flushed;
+		priv->port_stats.lro_no_desc += priv->rx_ring[i]->lro.lro_mgr.stats.no_desc;
+	}
+}
+#endif
+
 void mlx4_en_get_ethtool_stats(struct net_device *dev,
 		struct ethtool_stats *stats, u64 *data)
 {
@@ -491,6 +511,10 @@ void mlx4_en_get_ethtool_stats(struct net_device *dev,
 
 	spin_lock_bh(&priv->stats_lock);
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	mlx4_en_update_lro_stats(priv);
+#endif
+
 	for (i = 0; i < NUM_PKT_STATS; i++,
 			bitmap_sim_iterator_inc(&it))
 		if (bitmap_sim_iterator_test(&it))
@@ -1706,6 +1730,22 @@ static int mlx4_en_get_ts_info(struct net_device *dev,
 	return ret;
 }
 
+#if ((LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)) && (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,39)))
+int mlx4_en_set_flags(struct net_device *dev, u32 data)
+{
+	if (data & ETH_FLAG_LRO)
+		dev->features |= NETIF_F_LRO;
+	else
+		dev->features &= ~NETIF_F_LRO;
+	return 0;
+}
+
+u32 mlx4_en_get_flags(struct net_device *dev)
+{
+	return dev->features & (ETH_FLAG_LRO | ETH_FLAG_NTUPLE | ETH_FLAG_RXHASH);
+}
+#endif
+
 const struct ethtool_ops mlx4_en_ethtool_ops = {
 	.get_drvinfo = mlx4_en_get_drvinfo,
 	.get_settings = mlx4_en_get_settings,
@@ -1737,6 +1777,13 @@ const struct ethtool_ops mlx4_en_ethtool_ops = {
 	.set_pauseparam = mlx4_en_set_pauseparam,
 	.get_ringparam = mlx4_en_get_ringparam,
 	.set_ringparam = mlx4_en_set_ringparam,
+#if ((LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)) && (LINUX_VERSION_CODE < KERNEL_VERSION(2,6,39)))
+	.get_flags = mlx4_en_get_flags,
+	.set_flags = mlx4_en_set_flags,
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,35))
+	.get_flags = ethtool_op_get_flags,
+	.set_flags = ethtool_op_set_flags,
+#endif
 	.get_rxnfc = mlx4_en_get_rxnfc,
 	.set_rxnfc = mlx4_en_set_rxnfc,
 #ifndef CONFIG_COMPAT_INDIR_SETTING
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -2813,7 +2813,12 @@ int mlx4_en_init_netdev(struct mlx4_en_dev *mdev, int port,
 	 * Set driver features
 	 */
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	dev->hw_features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM |
+		NETIF_F_GRO | NETIF_F_LRO;
+#else
 	dev->hw_features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM | NETIF_F_GRO;
+#endif
 	if (mdev->LSO_support)
 		dev->hw_features |= NETIF_F_TSO | NETIF_F_TSO6;
 
@@ -2839,7 +2844,12 @@ int mlx4_en_init_netdev(struct mlx4_en_dev *mdev, int port,
 #endif
 
 #else
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM |
+		NETIF_F_GRO | NETIF_F_LRO;
+#else
 	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM | NETIF_F_GRO;
+#endif
 	if (mdev->LSO_support)
 		dev->features |= NETIF_F_TSO | NETIF_F_TSO6;
 
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_rx.c b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@ -203,6 +203,34 @@ static void mlx4_en_free_rx_buf(struct mlx4_en_priv *priv,
 	}
 }
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+static int mlx4_en_get_frag_hdr(struct skb_frag_struct *frags, void **mac_hdr,
+				   void **ip_hdr, void **tcpudp_hdr,
+				   u64 *hdr_flags, void *priv)
+{
+	*mac_hdr = page_address(frags->page) + frags->page_offset;
+	*ip_hdr = *mac_hdr + ETH_HLEN;
+	*tcpudp_hdr = (struct tcphdr *)(*ip_hdr + sizeof(struct iphdr));
+	*hdr_flags = LRO_IPV4 | LRO_TCP;
+
+	return 0;
+}
+
+static void mlx4_en_lro_init(struct mlx4_en_rx_ring *ring,
+			    struct mlx4_en_priv *priv)
+{
+	ring->lro.lro_mgr.max_aggr		= MLX4_EN_LRO_MAX_AGGR;
+	ring->lro.lro_mgr.max_desc		= MLX4_EN_LRO_MAX_DESC;
+	ring->lro.lro_mgr.lro_arr		= ring->lro.lro_desc;
+	ring->lro.lro_mgr.get_frag_header	= mlx4_en_get_frag_hdr;
+	ring->lro.lro_mgr.features		= LRO_F_NAPI;
+	ring->lro.lro_mgr.frag_align_pad	= NET_IP_ALIGN;
+	ring->lro.lro_mgr.dev			= priv->dev;
+	ring->lro.lro_mgr.ip_summed		= CHECKSUM_UNNECESSARY;
+	ring->lro.lro_mgr.ip_summed_aggr	= CHECKSUM_UNNECESSARY;
+}
+#endif
+
 int mlx4_en_create_rx_ring(struct mlx4_en_priv *priv,
 			   struct mlx4_en_rx_ring **pring,
 			   u32 size, int node)
@@ -261,6 +289,9 @@ int mlx4_en_create_rx_ring(struct mlx4_en_priv *priv,
 	ring->buf = ring->wqres.buf.direct.buf;
 
 	ring->hwtstamp_rx_filter = priv->hwtstamp_config.rx_filter;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	mlx4_en_lro_init(ring, priv);
+#endif
 
 	*pring = ring;
 	return 0;
@@ -510,6 +541,31 @@ static void validate_loopback(struct mlx4_en_priv *priv, struct sk_buff *skb)
 	priv->loopback_ok = 1;
 }
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+static inline int mlx4_en_can_lro(__be16 status)
+{
+	static __be16 status_all;
+	static __be16 status_ipv4_ipok_tcp;
+
+	status_all		= cpu_to_be16(
+					MLX4_CQE_STATUS_IPV4    |
+					MLX4_CQE_STATUS_IPV4F   |
+					MLX4_CQE_STATUS_IPV6    |
+					MLX4_CQE_STATUS_IPV4OPT |
+					MLX4_CQE_STATUS_TCP     |
+					MLX4_CQE_STATUS_UDP     |
+					MLX4_CQE_STATUS_IPOK);
+
+	status_ipv4_ipok_tcp	= cpu_to_be16(
+					MLX4_CQE_STATUS_IPV4    |
+					MLX4_CQE_STATUS_IPOK    |
+					MLX4_CQE_STATUS_TCP);
+
+	status &= status_all;
+	return status == status_ipv4_ipok_tcp;
+}
+#endif
+
 static inline int invalid_cqe(struct mlx4_en_priv *priv,
 			      struct mlx4_cqe *cqe)
 {
@@ -554,6 +610,9 @@ int mlx4_en_process_rx_cq(struct net_device *dev,
 	struct mlx4_cqe *buf = cq->buf;
 	u64 timestamp;
 	int ip_summed;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	struct skb_frag_struct lro_frag;
+#endif
 
 	if (!priv->port_up)
 		return 0;
@@ -625,6 +684,28 @@ int mlx4_en_process_rx_cq(struct net_device *dev,
 			   (cqe->checksum == cpu_to_be16(0xffff)))) {
 			ring->csum_ok++;
 			ip_summed = CHECKSUM_UNNECESSARY;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+			/* traffic eligible for LRO */
+			if ((dev->features & NETIF_F_LRO) &&
+			    mlx4_en_can_lro(cqe->status) &&
+			    (ring->hwtstamp_rx_filter == HWTSTAMP_FILTER_NONE) &&
+			    !(be32_to_cpu(cqe->vlan_my_qpn) &
+			     MLX4_CQE_VLAN_PRESENT_MASK)) {
+				lro_frag.page = rx_buf->page;
+				lro_frag.size = length;
+				lro_frag.page_offset = rx_buf->page_offset;
+
+				if (mlx4_en_complete_rx_desc(priv, ring, rx_desc,
+						     rx_buf, NULL, length)) {
+					stats->rx_dropped++;
+					goto next;
+				}
+
+				/* Push it up the stack (LRO) */
+				lro_receive_frags(&ring->lro.lro_mgr, &lro_frag, length, length, NULL, 0);
+				goto next;
+			}
+#endif
 		} else {
 			ring->csum_none++;
 			ip_summed = CHECKSUM_NONE;
@@ -695,6 +776,10 @@ next:
 	}
 
 out:
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	if (dev->features & NETIF_F_LRO)
+		lro_flush_all(&priv->rx_ring[cq->ring]->lro.lro_mgr);
+#endif
 	AVG_PERF_COUNTER(priv->pstats.rx_coal_avg, polled);
 	mcq->cons_index = cons_index;
 	mlx4_cq_set_ci(mcq);
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -46,6 +46,9 @@
 #include <linux/dcbnl.h>
 #endif
 #include <linux/cpu_rmap.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+#include <linux/inet_lro.h>
+#endif
 
 #include <linux/mlx4/device.h>
 #include <linux/mlx4/qp.h>
@@ -280,6 +283,17 @@ struct mlx4_en_tx_desc {
 #define MLX4_EN_TX_BUDGET 64
 #define MLX4_EN_RX_BUDGET 64
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+/* LRO defines for MLX4_EN */
+#define MLX4_EN_LRO_MAX_DESC	32
+#define MLX4_EN_LRO_MAX_AGGR	MAX_SKB_FRAGS
+
+struct mlx4_en_lro {
+	struct net_lro_mgr	lro_mgr;
+	struct net_lro_desc	lro_desc[MLX4_EN_LRO_MAX_DESC];
+};
+
+#endif
 #define MLX4_EN_CX3_LOW_ID	0x1000
 #define MLX4_EN_CX3_HIGH_ID	0x1005
 
@@ -359,6 +373,9 @@ struct mlx4_en_rx_ring {
 	unsigned long csum_none;
 	int hwtstamp_rx_filter;
 	int numa_node;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	struct mlx4_en_lro lro;
+#endif
 };
 
 struct mlx4_en_cq {
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_stats.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_stats.h
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_stats.h
@@ -88,6 +88,11 @@ struct mlx4_en_vport_stats {
 };
 
 struct mlx4_en_port_stats {
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+	unsigned long lro_aggregated;
+	unsigned long lro_flushed;
+	unsigned long lro_no_desc;
+#endif
 	unsigned long tso_packets;
 	unsigned long queue_stopped;
 	unsigned long wake_queue;
@@ -96,7 +101,11 @@ struct mlx4_en_port_stats {
 	unsigned long rx_chksum_good;
 	unsigned long rx_chksum_none;
 	unsigned long tx_chksum_offload;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0))
+#define NUM_PORT_STATS		11
+#else
 #define NUM_PORT_STATS		8
+#endif
 };
 
 struct mlx4_en_perf_stats {
