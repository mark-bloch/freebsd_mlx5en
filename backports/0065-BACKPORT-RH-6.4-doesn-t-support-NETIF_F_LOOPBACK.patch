From: Matan Barak <matanb@mellanox.com>
Subject: [PATCH] BACKPORT: RH 6.4 doesn't support NETIF_F_LOOPBACK

Loopback on RH 6.4 can't be set in ethtool since the
NETIF_F_LOOPBACK isn't supported by the kernel.
This patch adds support to this through the sysfs.

issue: 219712
Change-Id: I8eb58186c112fb571f34ae36be74bc57eea23cd2
Signed-off-by: Matan Barak <matanb@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx4/en_netdev.c |    7 ++-
 drivers/net/ethernet/mellanox/mlx4/en_sysfs.c  |   49 ++++++++++++++++++++++++
 drivers/net/ethernet/mellanox/mlx4/mlx4_en.h   |    5 ++-
 3 files changed, 58 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -2436,8 +2436,11 @@ static int mlx4_en_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 	}
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-static int mlx4_en_set_features(struct net_device *netdev,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39) || defined(CONFIG_COMPAT_LOOPBACK))
+#ifndef CONFIG_COMPAT_LOOPBACK
+static
+#endif
+int mlx4_en_set_features(struct net_device *netdev,
 		netdev_features_t features)
 {
 	struct mlx4_en_priv *priv = netdev_priv(netdev);
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_sysfs.c b/drivers/net/ethernet/mellanox/mlx4/en_sysfs.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/en_sysfs.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_sysfs.c
@@ -356,6 +356,52 @@ static DEVICE_ATTR(rx_channels, S_IRUGO | S_IWUSR,
 
 #endif
 
+#ifdef CONFIG_COMPAT_LOOPBACK
+static ssize_t mlx4_en_show_loopback(struct device *d,
+		struct device_attribute *attr,
+		char *buf)
+{
+	struct net_device *dev = to_net_dev(d);
+	int len = 0;
+
+	len += sprintf(buf + len, "%d\n", !!(dev->flags & NETIF_F_LOOPBACK));
+
+	return len;
+}
+
+static ssize_t mlx4_en_store_loopback(struct device *d,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	struct net_device *dev = to_net_dev(d);
+	char *endp;
+	unsigned long new;
+	int ret = -EINVAL;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	new = simple_strtoul(buf, &endp, 0);
+	if (endp == buf)
+		goto err;
+
+	if (new)
+		dev->flags |= NETIF_F_LOOPBACK;
+	else
+		dev->flags &= ~NETIF_F_LOOPBACK;
+
+	mlx4_en_set_features(dev, dev->flags);
+
+	ret = count;
+
+err:
+	return ret;
+}
+
+static DEVICE_ATTR(loopback, S_IRUGO | S_IWUSR,
+                  mlx4_en_show_loopback, mlx4_en_store_loopback);
+#endif
+
 static struct attribute *mlx4_en_qos_attrs[] = {
 #ifndef CONFIG_COMPAT_DISABLE_DCB
 #ifndef CONFIG_COMPAT_MAXRATE
@@ -372,6 +418,9 @@ static struct attribute *mlx4_en_qos_attrs[] = {
 	&dev_attr_tx_channels.attr,
 	&dev_attr_rx_channels.attr,
 #endif
+#ifdef CONFIG_COMPAT_LOOPBACK
+	&dev_attr_loopback.attr,
+#endif
 	NULL,
 };
 
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -984,5 +984,8 @@ u32 mlx4_en_get_rxfh_indir_size(struct net_device *dev);
 int mlx4_en_get_rxfh_indir(struct net_device *dev, u32 *ring_index);
 int mlx4_en_set_rxfh_indir(struct net_device *dev, const u32 *ring_index);
 #endif
-
+#ifdef CONFIG_COMPAT_LOOPBACK
+int mlx4_en_set_features(struct net_device *netdev,
+		netdev_features_t features);
+#endif
 #endif
